MODULE TEST_DFC_PF
  USE service, ONLY : DP
  USE funit
  IMPLICIT NONE

CONTAINS
  @test
  SUBROUTINE DFCQX()
    !> Quick check for DFC.
    !***
    ! **Description:**
    !
    !   Quick check subprogram for the subroutine DFC.
    !
    !   Fit discrete data by an S-shaped curve.  Evaluate the fitted curve,
    !   its first two derivatives, and probable error curve.
    !
    !   Use subprogram DFC to obtain the constrained cubic B-spline
    !   representation of the curve.
    !
    !   The values of the coefficients of the B-spline as computed by DFC
    !   and the values of the fitted curve as computed by DBVALU in the
    !   de Boor package are tested for accuracy with the expected values.
    !   See the example program in the report sand78-1291, pp. 22-27.
    !
    !   The dimensions in the following arrays are as small as possible for
    !   the problem being solved.

    USE service, ONLY : eps_dp
    USE approximation, ONLY : DCV, DFC
    USE interpolation, ONLY : DBVALU
    !     .. Local Scalars ..
    REAL(DP) :: t, tol, xval
    INTEGER :: i, idigit, ii, j, l, mode, n, nconst, ndeg, nval
    !     .. Local Arrays ..
    REAL(DP) :: coeff(9), v(51,5), w(529), xconst(11), yconst(11)
    INTEGER :: iw(30), nderiv(11)
    !     .. Intrinsic Functions ..
    INTRINSIC ABS, REAL, SQRT
    !     .. Data statements ..
    !
    INTEGER, PARAMETER :: ndata = 9, nord = 4, nbkpt = 13, last = 10
    REAL(DP), PARAMETER :: xdata(9) = [ 0.15_DP, 0.27_DP, 0.33_DP, 0.40_DP, 0.43_DP, &
      0.47_DP, 0.53_DP, 0.58_DP, 0.63_DP ]
    REAL(DP), PARAMETER :: ydata(9) = [ 0.025_DP, 0.05_DP, 0.13_DP, 0.27_DP, 0.37_DP, &
      0.47_DP, 0.64_DP, 0.77_DP, 0.87_DP ]
    REAL(DP), PARAMETER :: sddata(9)  = 0.015_DP
    REAL(DP), PARAMETER :: bkpt(13) = [ -0.6_DP, -0.4_DP, -0.2_DP, 0._DP, 0.2_DP, &
      0.4_DP, 0.6_DP, 0.8_DP, 0.9_DP, 1._DP, 1.1_DP, 1.2_DP, 1.3_DP ]
    !
    !  Store the data to be used to check the accuracy of the computed results.
    !  See SAND78-1291, p.26.
    !
    REAL(DP), PARAMETER :: coefck(9) = [ 1.186380846E-13_DP, -2.826166426E-14_DP, &
      -4.333929094E-15_DP, 1.722113311E-01_DP, 9.421965984E-01_DP, 9.684708719E-01_DP, &
      9.894902905E-01_DP,  1.005254855E+00_DP, 9.894902905E-01_DP ]
    REAL(DP), PARAMETER :: check(51) = [ 2.095830752E-16_DP, 2.870188850E-05_DP, &
      2.296151081E-04_DP, 7.749509897E-04_DP, 1.836920865E-03_DP, 3.587736064E-03_DP, &
      6.199607918E-03_DP, 9.844747759E-03_DP, 1.469536692E-02_DP, 2.092367672E-02_DP, &
      2.870188851E-02_DP, 3.824443882E-02_DP, 4.993466504E-02_DP, 6.419812979E-02_DP, &
      8.146039566E-02_DP, 1.021470253E-01_DP, 1.266835812E-01_DP, 1.554956261E-01_DP, &
      1.890087225E-01_DP, 2.276484331E-01_DP, 2.718403204E-01_DP, 3.217163150E-01_DP, &
      3.762338189E-01_DP, 4.340566020E-01_DP, 4.938484342E-01_DP, 5.542730855E-01_DP, &
      6.139943258E-01_DP, 6.716759250E-01_DP, 7.259816530E-01_DP, 7.755752797E-01_DP, &
      8.191205752E-01_DP, 8.556270903E-01_DP, 8.854875002E-01_DP, 9.094402609E-01_DP, &
      9.282238286E-01_DP, 9.425766596E-01_DP, 9.532372098E-01_DP, 9.609439355E-01_DP, &
      9.664352927E-01_DP, 9.704497377E-01_DP, 9.737257265E-01_DP, 9.768786393E-01_DP, &
      9.800315521E-01_DP, 9.831844649E-01_DP, 9.863373777E-01_DP, 9.894902905E-01_DP, &
      9.926011645E-01_DP, 9.954598055E-01_DP, 9.978139804E-01_DP, 9.994114563E-01_DP, &
      1.000000000E+00_DP ]
    !* FIRST EXECUTABLE STATEMENT  DFCQX
    ndeg = nord - 1
    !
    !     Write the various constraints for the fitted curve.
    !
    nconst = 0
    t = bkpt(nord)
    !
    !     Constrain function to be zero at left-most breakpoint.
    !
    nconst = nconst + 1
    xconst(nconst) = t
    yconst(nconst) = 0._DP
    nderiv(nconst) = 2 + 4*0
    !
    !     Constrain first derivative to be nonnegative at left-most
    !     breakpoint.
    !
    nconst = nconst + 1
    xconst(nconst) = t
    yconst(nconst) = 0._DP
    nderiv(nconst) = 1 + 4*1
    !
    !     Constrain second derivatives to be nonnegative at left set of
    !     breakpoints.
    !
    DO i = 1, 3
      l = ndeg + i
      t = bkpt(l)
      nconst = nconst + 1
      xconst(nconst) = t
      yconst(nconst) = 0._DP
      nderiv(nconst) = 1 + 4*2
    END DO
    !
    !     Constrain function value at right-most breakpoint to be one.
    !
    nconst = nconst + 1
    t = bkpt(last)
    xconst(nconst) = t
    yconst(nconst) = 1._DP
    nderiv(nconst) = 2 + 4*0
    !
    !     Constrain slope to agree at left- and right-most breakpoints.
    !
    nconst = nconst + 1
    xconst(nconst) = bkpt(nord)
    yconst(nconst) = bkpt(last)
    nderiv(nconst) = 3 + 4*1
    !
    !     Constrain second derivatives to be nonpositive at right set of
    !     breakpoints.
    !
    DO i = 1, 4
      nconst = nconst + 1
      l = last - 4 + i
      xconst(nconst) = bkpt(l)
      yconst(nconst) = 0._DP
      nderiv(nconst) = 0 + 4*2
    END DO
    !
    idigit = -4
    !
    !     Declare amount of working storage allocated to DFC.
    !
    iw(1) = 529
    iw(2) = 30
    !
    !  Set mode to indicate a new problem and request the variance function.
    !
    mode = 2
    !
    !     Obtain the coefficients of the B-spline.
    !
    CALL DFC(ndata,xdata,ydata,sddata,nord,nbkpt,bkpt,nconst,xconst,yconst,&
      nderiv,mode,coeff,w,iw)
    !
    !  Check coefficients.
    !
    tol = MAX(7._DP*SQRT(eps_dp),1.E-8_DP)
    @AssertEqual( coefck, coeff, tol )
    !
    !  Compute value, first two derivatives and probable uncertainty.
    !
    n = nbkpt - nord
    nval = 51
    DO i = 1, nval
      !
      !  The function DBVALU is in the de Boor B-spline package.
      !
      xval = REAL( i-1, DP)/(nval-1)
      ii = 1
      DO j = 1, 3
        v(i,j+1) = DBVALU(bkpt,coeff,n,nord,j-1,xval)
      END DO
      v(i,1) = xval
      !
      !  The variance function DCV is a companion subprogram to DFC.
      !
      v(i,5) = SQRT(DCV(xval,ndata,nconst,nord,nbkpt,bkpt,w))
    END DO
    !
    @AssertEqual( check, v(:,2), tol )
    !
    RETURN
  END SUBROUTINE DFCQX
  !
END MODULE TEST_DFC_PF