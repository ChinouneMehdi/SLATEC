MODULE TEST_PFITQX_PF
  USE service, ONLY : SP
  USE funit
  IMPLICIT NONE

CONTAINS
  @test
  SUBROUTINE PFITQX()
    !> Quick check for POLFIT, PCOEF and PVALUE.
    USE service, ONLY : eps_sp
    USE approximation, ONLY : PCOEF, POLFIT, PVALUE
    !     .. Local Scalars ..
    REAL(SP) :: yfit, eps, rp, sveps, tol
    INTEGER :: i, m, maxord, ierp, ierr, nord, nordp
    !     .. Local Arrays ..
    REAL(SP) :: a(97), tc(5), w(11), x(11), y(11), yp(5), r(11)
    !* FIRST EXECUTABLE STATEMENT  PFITQX
    !
    !     Initialize variables for testing passage or failure of tests
    !
    tol = SQRT(eps_sp)
    m = 11
    DO i = 1, m
      x(i) = i - 6
      y(i) = x(i)**4
    END DO
    !
    !     Test POLFIT
    !     Input EPS is negative - specified level
    !
    w(1) = -1._SP
    eps = -0.01_SP
    sveps = eps
    maxord = 8
    nordp = 4
    rp = 625._SP
    ierp = 1
    CALL POLFIT(m,x,y,w,maxord,nord,eps,r,ierr,a)
    !
    !     See if test passed
    !
    @AssertEqual( nordp, nord )
    @AssertEqual( rp, r(11), tol )
    @AssertEqual( ierp, ierr )
    !
    !     Input EPS is negative - computed level
    !
    eps = -1._SP
    sveps = eps
    CALL POLFIT(m,x,y,w,maxord,nord,eps,r,ierr,a)
    !
    !     See if test passed
    !
    @AssertEqual( nordp, nord )
    @AssertEqual( rp, r(11), tol )
    @AssertEqual( ierp, ierr )
    !
    !     Input EPS is zero
    !
    w(1) = -1._SP
    eps = 0._SP
    sveps = eps
    nordp = 5
    maxord = 5
    CALL POLFIT(m,x,y,w,maxord,nord,eps,r,ierr,a)
    !
    !     See if test passed
    !
    @AssertEqual( eps, sveps, Tol )
    @AssertEqual( nordp, nord )
    @AssertEqual( rp, r(11), tol )
    @AssertEqual( ierp, ierr )
    !
    !     Input EPS is positive
    !
    ierp = 1
    nordp = 4
    eps = 75._SP*eps_sp
    sveps = eps
    CALL POLFIT(m,x,y,w,maxord,nord,eps,r,ierr,a)
    !
    !     See if test passed
    !
    @AssertEqual( eps, sveps, Tol )
    @AssertEqual( nordp, nord )
    @AssertEqual( rp, r(11), tol )
    @AssertEqual( ierp, ierr )
    !
    !     MAXORD too small to meet RMS error
    !
    m = 11
    w(1) = -1._SP
    eps = 5._SP*eps_sp
    sveps = eps
    rp = 553._SP
    maxord = 2
    ierp = 3
    nordp = 2
    CALL POLFIT(m,x,y,w,maxord,nord,eps,r,ierr,a)
    !
    !     See if test passed
    !
    @AssertEqual( nordp, nord )
    @AssertEqual( rp, r(11), tol )
    @AssertEqual( ierp, ierr )
    !
    !     MAXORD too small to meet statistical test
    !
    nordp = 4
    ierp = 4
    rp = 625._SP
    eps = -0.01_SP
    sveps = eps
    maxord = 5
    CALL POLFIT(m,x,y,w,maxord,nord,eps,r,ierr,a)
    !
    !     See if test passed
    !
    @AssertEqual( nordp, nord )
    @AssertEqual( rp, r(11), tol )
    @AssertEqual( ierp, ierr )
    !
    !     Test PCOEF
    !
    maxord = 6
    eps = 0._SP
    sveps = eps
    y(6) = 1._SP
    DO i = 1, m
      w(i) = 1._SP/(y(i)**2)
    END DO
    y(6) = 0._SP
    CALL POLFIT(m,x,y,w,maxord,nord,eps,r,ierr,a)
    CALL PCOEF(4,5._SP,tc,a)
    !
    !     See if test passed
    !
    @AssertEqual( tc(1), r(11), tol )
    !
    !     Test PVALUE
    !     Normal call
    !
    CALL PVALUE(6,0,x(8),yfit,yp,a)
    !
    !     See if test passed
    !
    @AssertEqual( yfit, r(8), tol )
    !
    RETURN
  END SUBROUTINE PFITQX
  !
END MODULE TEST_PFITQX_PF